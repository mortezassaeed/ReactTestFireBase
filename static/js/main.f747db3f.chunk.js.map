{"version":3,"sources":["logo.svg","firebase/firebase.utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup","createUserInDb","user","addtionalData","a","console","log","userRef","doc","uid","get","userSanpshot","displayName","email","exists","set","App","props","unsubscribeFromAuth","state","other","name","age","this","onAuthStateChanged","signUser","setState","onClick","signOut","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,kNCezCC,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIV,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAE5BC,EAAW,IAAIZ,IAASU,KAAKG,mBACnCD,EAASE,oBAAoB,CAACC,OAAS,mBAChC,IAAMC,EAAmB,kBAAMN,EAAKO,gBAAgBL,IAS9CM,EAAc,uCAAG,WAAOC,EAAMC,GAAb,qBAAAC,EAAA,yDAExBF,EAFwB,yCAGnB,MAHmB,cAI1BG,QAAQC,IAAIJ,GACNK,EAAUb,EAAUc,IAAV,gBAAuBN,EAAKO,MALlB,SAMCF,EAAQG,MANT,UAMpBC,EANoB,OAOlBC,EAAuBV,EAAvBU,YAAaC,EAAUX,EAAVW,MAPK,SAUpBF,EAAaG,OAVO,kCAWhBP,EAAQQ,IAAR,aACJH,cACAC,SACGV,IAdiB,0DAkBxBE,QAAQC,IAAR,MAlBwB,0DAAH,wDCcdU,EAtCf,kDAEE,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAFRC,oBAAsB,KAIpB,EAAKC,MAAQ,CACXC,MAAQ,CAAEC,KAAO,QAAUC,IAAM,WAJnB,EAFpB,gEAWuB,IAAD,OAElBC,KAAKL,oBAAsBzB,EAAK+B,mBAAL,+BAAApB,EAAA,MAAwB,WAAMqB,GAAN,SAAArB,EAAA,sEAE3CH,EAAewB,GAF4B,OAGjD,EAAKC,SAAS,CAAExB,KAAOuB,IAH0B,2CAAxB,yDAb/B,6CAuBIF,KAAKL,wBAvBT,+BA2BI,OACE,6BACIK,KAAKJ,MAAMjB,KAAOqB,KAAKJ,MAAMjB,KAAKW,MAAQ,SAC5C,4BAAQc,QAAS5B,GAAjB,UACA,4BAAQ4B,QAAS,kBAAMlC,EAAKmC,YAA5B,gBA/BR,GAAyBC,aCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.f747db3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase/app';\r\nimport  \"firebase/firestore\";\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyDPiC02G7uTBaqB6BJJ2avuxNt-RUk-jbM\",\r\n    authDomain: \"crown-db-84e58.firebaseapp.com\",\r\n    databaseURL: \"https://crown-db-84e58.firebaseio.com\",\r\n    projectId: \"crown-db-84e58\",\r\n    storageBucket: \"crown-db-84e58.appspot.com\",\r\n    messagingSenderId: \"883606008282\",\r\n    appId: \"1:883606008282:web:2312c170ba3edc309a50e3\",\r\n    measurementId: \"G-L6TE7FJSS8\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  provider.setCustomParameters({prompt : 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\n\r\n  // firestore.collection('users').doc('[id]').collection('cartItem').doc('id');\r\n  // firestore.doc('/users/[id]/cartItem/[id]')\r\n  // firestore.collection('/users/[id]/cartItem')\r\n\r\n\r\n\r\n  export const createUserInDb = async (user, addtionalData)=>{\r\n    debugger;\r\n    if(!user)\r\n      return null;\r\n      console.log(user);\r\n      const userRef = firestore.doc(`users/${user.uid}`);\r\n      const userSanpshot = await userRef.get();\r\n      const { displayName, email } = user;\r\n\r\n      try{\r\n        if(!userSanpshot.exists){\r\n          await userRef.set({\r\n            displayName,\r\n            email,\r\n            ...addtionalData\r\n          });\r\n        }\r\n      }catch(e){\r\n        console.log(e);\r\n      }\r\n  }","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { auth ,signInWithGoogle, createUserInDb } from './firebase/firebase.utils'\n\n\nexport class App extends Component{\n  unsubscribeFromAuth = null;\n  constructor(props){\n    super(props);\n\n    this.state = {\n      other : { name : 'abbas' , age : '012345' }\n    }\n  }\n\n\n  componentDidMount() {\n    \n    this.unsubscribeFromAuth = auth.onAuthStateChanged(async signUser =>\n     {\n      await createUserInDb(signUser);\n      this.setState({ user : signUser })\n     })\n\n     \n\n  }\n  componentWillUnmount() {\n    this.unsubscribeFromAuth();\n  }\n\n  render(){\n    return (\n      <div>\n        { this.state.user ? this.state.user.email : 'no one' } \n        <button onClick={signInWithGoogle}>signin</button>\n        <button onClick={() => auth.signOut()}>signout</button>\n      </div>\n      );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}